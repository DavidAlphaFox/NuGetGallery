@{
    ViewBag.Title = "Revoke API Keys";
}
@ViewHelpers.AjaxAntiForgeryToken(Html)

<section role="main" class="container main-container">
    <h2>Verify API Keys</h2>
    <p class="text-muted">
        Please follow the format as below: <br />
        {"ApiKey":"oy2apikey1","LeakedUrl":"https://leakedUrl1"} <br />
        {"ApiKey":"oy2apikey2","LeakedUrl":"https://leakedUrl2"}
    </p>
    <form>
        <textarea class="form-control" placeholder="Verify API keys to revoke" autocomplete="off" autofocus rows="5" data-bind="value: verifyQuery"></textarea><br />
        <input type="button" value="Verify" data-bind="click: verify" /><br />
    </form>
    <!-- ko if: Error -->
    @ViewHelpers.AlertDanger(@<text><span data-bind="html: Error"></span></text>)
    <!-- /ko -->
    <table class="table break-word" data-bind="visible: verifiedResults().length > 0">
        <thead>
            <tr>
                <th class="col-sm-1"><input type="checkbox" data-bind="visible: findAnyRevocableApiKeys" /></th>
                <th class="col-sm-5">Api Key</th>
                <th class="col-sm-6">Information</th>
            </tr>
        </thead>
        <tbody data-bind="foreach: verifiedResults">
            <tr>
                <td class="col-sm-1" style="vertical-align: middle"><input type="checkbox" data-bind="visible: IsRevocable" /></td>
                <td class="col-sm-5" style="vertical-align: middle"><span data-bind="text: ApiKey"></span></td>
                <td class="col-sm-6" style="vertical-align: middle">
                    <!-- ko if: ApiKeyViewModel -->
                    <span data-bind="visible: ApiKeyViewModel.Type">
                        <code>Type:</code> <span data-bind="text: ApiKeyViewModel.Type"></span><br />
                    </span>
                    <span data-bind="visible: ApiKeyViewModel.Owner">
                        <code>Owner:</code> <a data-bind="text: ApiKeyViewModel.Owner, attr: { href: $parent.generateProfileUrl(ApiKeyViewModel.Owner)}"></a><br />
                    </span>
                    <span>
                        <code>Status:</code>
                        <!-- ko if: ApiKeyViewModel.HasExpired -->
                        Expired <br />
                        <!-- /ko -->
                        <!-- ko ifnot: ApiKeyViewModel.HasExpired -->
                        <!-- ko if: ApiKeyViewModel.Expires -->
                        Expires <span data-bind="text: moment(ApiKeyViewModel.Expires).fromNow()"></span><br />
                        <!-- /ko -->
                        <!-- ko ifnot: ApiKeyViewModel.Expires -->
                        Never expires<br />
                        <!-- /ko -->
                        <!-- /ko -->
                    </span>
                    <span data-bind="visible: ApiKeyViewModel.Description">
                        <code>Description:</code> <span data-bind="text: ApiKeyViewModel.Description"></span><br />
                    </span>
                    <code>Leaked Url:</code> <a data-bind="text: LeakedUrl, attr: {href: LeakedUrl}"></a><br />
                    <!-- /ko -->
                    <!-- ko ifnot: ApiKeyViewModel -->
                    Not Found
                    <!-- /ko -->
                </td>
            </tr>
        </tbody>
    </table>
</section>

@section BottomScripts {
    <script>
        $(document).ready(function () {
            var viewModel = function () {
                var $self = this;

                this.verifyQuery = ko.observable('');
                this.verifiedResults = ko.observableArray([]);
                this.Error = ko.observable();

                this.verify = function () {
                    $self.verifiedResults.removeAll();
                    $self.Error(null);

                    $.ajax({
                        url: '@Url.Action("Verify", "ApiKeys", new {area = "Admin"})',
                        cache: false,
                        dataType: 'json',
                        type: 'POST',
                        data: window.nuget.addAjaxAntiForgeryToken({ verifyQuery: $self.verifyQuery() }),
                        success: function(data) {
                            for (var i = 0; i < data.length; i++) {
                                data[i].Selected = ko.observable(false);
                            }
                            $self.verifiedResults(data);
                        }
                    })
                    .fail(function(jqXhr, textStatus, errorThrown) {
                        var error = "Unknown error when verifying the API keys!";
                        if (jqXhr.responseJSON) {
                            error = jqXhr.responseJSON;
                        }
                        $self.Error(error);
                    });
                };

                this.generateProfileUrl = function (u) {
                    return '/profiles/' + u;
                };

                this.findAnyRevocableApiKeys = ko.pureComputed(function () {
                    var results = $self.verifiedResults();
                    if (!results || results.length === 0) {
                        return false;
                    }

                    for (var i = 0; i < results.length; i++) {
                        if (results[i].IsRevocable) {
                            return true;
                        }
                    }

                    return false;
                });
            };

            ko.applyBindings(new viewModel(), $('#stage').get(0));
        });
    </script>
}